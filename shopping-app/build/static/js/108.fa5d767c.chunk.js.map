{"version":3,"sources":["../../../src/web.ts"],"names":["ScreenOrientationWeb","_WebPlugin","_inherits","_super","_createSuper","_this","_classCallCheck","call","isSupported","screen","handleOrientationChange","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","changeEvent","wrap","_context","prev","next","getCurrentOrientation","sent","type","notifyListeners","stop","orientation","addEventListener","_createClass","key","value","_lock","_callee2","options","_context2","this","throwUnsupportedError","lock","_x","apply","arguments","_unlock","_callee3","_context3","unlock","_getCurrentOrientation","_callee4","_context4","t0","abrupt","OrientationType","LANDSCAPE_PRIMARY","LANDSCAPE_SECONDARY","PORTRAIT_SECONDARY","PORTRAIT_PRIMARY","unavailable","WebPlugin"],"mappings":"iPAUaA,EACX,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAIA,SAAAA,IAAA,IAAAK,EAOG,OAPHC,YAAA,KAAAN,IACEK,EAAAF,EAAAI,KAAA,OAHeC,YAAc,gBAAiBC,OA0CxCJ,EAAAK,wBAAuBC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,cAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACXf,EAAKgB,wBAAuB,OAA3CN,EAAMG,EAAAI,KACNN,EAAuC,CAC3CO,KAAMR,EAAOQ,MAEflB,EAAKmB,gBAAgB,0BAA2BR,GAAa,wBAAAE,EAAAO,OAAA,GAAAX,EAAA,KA3CzDT,EAAKG,aACPC,OAAOiB,YAAYC,iBACjB,SACAtB,EAAKK,yBAERL,CACH,CA4CC,OA5CAuB,YAAA5B,EAAA,EAAA6B,IAAA,OAAAC,MAAA,eAAAC,EAAApB,YAAAC,cAAAC,MAEM,SAAAmB,EAAWC,GAAoB,OAAArB,cAAAK,MAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAGnC,OAFIe,KAAK3B,aACR2B,KAAKC,wBACNF,EAAAd,KAAA,EACKX,OAAOiB,YAAYW,KAAKJ,EAAQV,MAAK,wBAAAW,EAAAT,OAAA,GAAAO,EAAA,UAC5C,gBAAAM,GAAA,OAAAP,EAAAQ,MAAA,KAAAC,UAAA,EAPA,IAOA,CAAAX,IAAA,SAAAC,MAAA,eAAAW,EAAA9B,YAAAC,cAAAC,MAEM,SAAA6B,IAAA,OAAA9B,cAAAK,MAAA,SAAA0B,GAAA,cAAAA,EAAAxB,KAAAwB,EAAAvB,MAAA,OACAe,KAAK3B,aACR2B,KAAKC,wBAEP3B,OAAOiB,YAAYkB,SAAS,wBAAAD,EAAAlB,OAAA,GAAAiB,EAAA,UAC7B,yBAAAD,EAAAF,MAAA,KAAAC,UAAA,EAPA,IAOA,CAAAX,IAAA,wBAAAC,MAAA,eAAAe,EAAAlC,YAAAC,cAAAC,MAEM,SAAAiC,IAAA,OAAAlC,cAAAK,MAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,OACAe,KAAK3B,aACR2B,KAAKC,wBACNW,EAAAC,GACOvC,OAAOiB,YAAYH,KAAIwB,EAAA3B,KACxB,sBADwB2B,EAAAC,GACL,EAEnB,wBAFmBD,EAAAC,GAEE,EAErB,uBAFqBD,EAAAC,GAED,wBAAAD,EAAAE,OAAA,SAHhB,CAAE1B,KAAM2B,IAAgBC,oBAAmB,cAAAJ,EAAAE,OAAA,SAE3C,CAAE1B,KAAM2B,IAAgBE,sBAAqB,cAAAL,EAAAE,OAAA,SAE7C,CAAE1B,KAAM2B,IAAgBG,qBAAoB,cAAAN,EAAAE,OAAA,SAE5C,CAAE1B,KAAM2B,IAAgBI,mBAAkB,wBAAAP,EAAAtB,OAAA,GAAAqB,EAAA,UAEtD,yBAAAD,EAAAN,MAAA,KAAAC,UAAA,EAhBA,IAgBA,CAAAX,IAAA,wBAAAC,MAUO,WACN,MAAMK,KAAKoB,YACT,wDAEJ,KAACvD,CAAA,CAxDD,CAAQwD,I","file":"static/js/108.fa5d767c.chunk.js","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  GetCurrentOrientationResult,\n  LockOptions,\n  ScreenOrientationChange,\n  ScreenOrientationPlugin,\n} from './definitions';\nimport { OrientationType } from './definitions';\n\nexport class ScreenOrientationWeb\n  extends WebPlugin\n  implements ScreenOrientationPlugin {\n  private readonly isSupported = 'orientation' in screen;\n\n  constructor() {\n    super();\n    if (this.isSupported) {\n      screen.orientation.addEventListener(\n        'change',\n        this.handleOrientationChange,\n      );\n    }\n  }\n\n  public async lock(options: LockOptions): Promise<void> {\n    if (!this.isSupported) {\n      this.throwUnsupportedError();\n    }\n    await screen.orientation.lock(options.type);\n  }\n\n  public async unlock(): Promise<void> {\n    if (!this.isSupported) {\n      this.throwUnsupportedError();\n    }\n    screen.orientation.unlock();\n  }\n\n  public async getCurrentOrientation(): Promise<GetCurrentOrientationResult> {\n    if (!this.isSupported) {\n      this.throwUnsupportedError();\n    }\n    switch (screen.orientation.type) {\n      case 'landscape-primary':\n        return { type: OrientationType.LANDSCAPE_PRIMARY };\n      case 'landscape-secondary':\n        return { type: OrientationType.LANDSCAPE_SECONDARY };\n      case 'portrait-secondary':\n        return { type: OrientationType.PORTRAIT_SECONDARY };\n      default:\n        return { type: OrientationType.PORTRAIT_PRIMARY };\n    }\n  }\n\n  private handleOrientationChange = async () => {\n    const result = await this.getCurrentOrientation();\n    const changeEvent: ScreenOrientationChange = {\n      type: result.type,\n    };\n    this.notifyListeners('screenOrientationChange', changeEvent);\n  };\n\n  private throwUnsupportedError(): never {\n    throw this.unavailable(\n      'Screen Orientation API not available in this browser.',\n    );\n  }\n}\n"],"sourceRoot":""}